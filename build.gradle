/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.9/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'eclipse'
}

version = '0.1.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    implementation 'com.google.guava:guava:23.0'
    // fast csv library
    implementation 'com.univocity:univocity-parsers:2.6.3'
    // hyperloglog library
    implementation 'com.clearspring.analytics:stream:2.9.5'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    //Apache Arrow framework
    implementation 'org.apache.arrow:arrow-vector:8.0.0'
    implementation 'org.apache.arrow:flight-core:8.0.0'
    implementation 'org.apache.arrow:flight-grpc:8.0.0'

    //SLF4J Logging framework
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'org.slf4j:slf4j-log4j12:1.7.36'


}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    jcenter()
}


jar {
    manifest {
        attributes('Implementation-Title': project.name,
                    'Implementation-Version': project.version,
                    'Main-Class': 'lazo.arrowserver.flightrpc.LazoProducer')
    }
}

tasks.register('uberJar', Jar) {
    archiveClassifier = 'uber'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes('Implementation-Title': project.name,
                    'Implementation-Version': project.version,
                    'Main-Class': 'lazo.arrowserver.flightrpc.LazoProducer')
    }

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }

}

// sourceSets {
//     main {
//         resources {
//             srcDirs "src/main/resources"
//         }
//     }
// }

// task execute(type:JavaExec) {
//     main = LazoProducer
//     classpath = lazo.arrowserver.flightrpc
// }
